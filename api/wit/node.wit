package plugin:node;

interface metadata {
    use memory.{uuid};

    record metadata {
        input-type: list<string>,
        output-type: list<string>,
        display-name: string
    }

    get-metadata: func() -> metadata;
    set-id: func(id: uuid);
}

interface runner {
    run: func() -> result<_, string>;
}

interface memory {
    record uuid {
        left: u64,
        right: u64
    }

    enum direction {
        input,
        output
    }

    record address {
        dir: direction,
        id: string,
        port: u16
    }

    resource manager {
        constructor();
        connect-port: func(src: address, dest: address) -> result<_, string>;
        allocate-id: func() -> uuid;
        read: func(src: address) -> list<u8>;
        write: func(dest: address, data: list<u8>);
        flush: func() -> result<_, string>;
    }
}

world node {
    import memory;
    export metadata;
    export runner;
}
